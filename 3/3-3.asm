; ������ � ���������� 3 ����� ����� �� ������ � ������� ������������. ������������ ���������.
; ?????????????????????????????????????????????????????????????????????????

;                 Build this with the "Project" menu using
;                        "Console Assemble & Link"

comment * ?????????????????????????????????????????????????????????????????

This demo shows how to perform simple addition using registers and assembler
instructions in the first example. The second example shows how to compare
a memory variable to an immediate number and branch to different labels
depending on how large the number is. Branching logic in assembler is very
simple and compact code.

????????????????????????????????????????????????????????????????????????? *

    comment * .486                                    ; create 32 bit code
    .model flat, stdcall                    ; 32 bit memory model
    option casemap :none                    ; case sensitive
    *
    include \masm32\include\masm32rt.inc
    
    include \masm32\include\windows.inc     ; always first
    include \masm32\macros\macros.asm       ; MASM support macros

  ; -----------------------------------------------------------------
  ; include files that have MASM format prototypes for function calls
  ; -----------------------------------------------------------------
    include \masm32\include\masm32.inc
    include \masm32\include\gdi32.inc
    include \masm32\include\user32.inc
    include \masm32\include\kernel32.inc

  ; ------------------------------------------------
  ; Library files that have definitions for function
  ; exports and tested reliable prebuilt code.
  ; ------------------------------------------------
    includelib \masm32\lib\masm32.lib
    includelib \masm32\lib\gdi32.lib
    includelib \masm32\lib\user32.lib
    includelib \masm32\lib\kernel32.lib
    .data
    s1 db "greater = %d ", 0

    .code                       ; Tell MASM where the code starts

; ?????????????????????????????????????????????????????????????????????????

start:                          ; The CODE entry point to the program

    call compare                   ; branch to the "main" procedure

    exit

; ?????????????????????????????????????????????????????????????????????????

compare proc

    LOCAL var1:DWORD            ; space for a DWORD variable
    LOCAL str1:DWORD            ; a string handle for the input data

    LOCAL var2:DWORD ; new var
    LOCAL var3:DWORD

  ; ----------------------------------------
  ; The two following macros can be combined
  ; once you are familiar with how they work
  ; ----------------------------------------
 ;     mov str1, input("Enter a number : ")
 ;     mov var1, sval(str1)        ; convert the result to a signed integer

    mov var1, sval(input("Enter a number var1 : "))
    mov var2, sval(input("Enter a number var2 : "))
    mov var3, sval(input("Enter a number var3 : "))

    mov eax, var2
    mov ebx, var3

    .if var1 >= eax
        .if var1 >= ebx
            mov ecx, var1
        .else
            mov ecx, ebx
        .endif
    .else
        .if eax >= ebx
            mov ecx, eax
        .else
            mov ecx, ebx
        .endif
    .endif

compare endp

    invoke crt_printf, addr s1, ecx
    invoke crt__getch
    invoke crt_exit, 0 ; ExitProcessssss
; ?????????????????????????????????????????????????????????????????????????

end start                       ; Tell MASM where the program ends
